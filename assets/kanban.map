{"version":3,"sources":["vendor/ember-cli/app-prefix.js","kanban/app.js","kanban/components/app-version.js","kanban/components/list-component.js","kanban/components/task-component.js","kanban/controllers/array.js","kanban/controllers/object.js","kanban/initializers/app-version.js","kanban/initializers/export-application-global.js","kanban/router.js","kanban/routes/board.js","kanban/templates/application.js","kanban/templates/board.js","kanban/templates/components/list-component.js","kanban/templates/components/task-component.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["\"use strict\";\n/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('kanban/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'kanban/config/environment'], function (exports, _ember, _emberResolver, _emberLoadInitializers, _kanbanConfigEnvironment) {\n\n  var App = undefined;\n\n  _ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = _ember['default'].Application.extend({\n    modulePrefix: _kanbanConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _kanbanConfigEnvironment['default'].podModulePrefix,\n    Resolver: _emberResolver['default']\n  });\n\n  (0, _emberLoadInitializers['default'])(App, _kanbanConfigEnvironment['default'].modulePrefix);\n\n  exports['default'] = App;\n});","define('kanban/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'kanban/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _kanbanConfigEnvironment) {\n\n  var name = _kanbanConfigEnvironment['default'].APP.name;\n  var version = _kanbanConfigEnvironment['default'].APP.version;\n\n  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({\n    version: version,\n    name: name\n  });\n});","define('kanban/components/list-component', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = _ember['default'].Component.extend({\n\n    actions: {\n      onOpenTaskCreationModal: function onOpenTaskCreationModal() {\n        this.sendAction('onOpenTaskCreationModal', this.get('list').id);\n      },\n      onDeleteTask: function onDeleteTask(taskId) {\n        this.sendAction('onDeleteTask', this.get('list').id, taskId);\n      }\n    }\n  });\n});","define('kanban/components/task-component', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = _ember['default'].Component.extend({\n    actions: {\n      onDeleteTask: function onDeleteTask() {\n        this.sendAction('onDeleteTask', this.get('task').id);\n      }\n    }\n  });\n});","define('kanban/controllers/array', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = _ember['default'].Controller;\n});","define('kanban/controllers/object', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = _ember['default'].Controller;\n});","define('kanban/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'kanban/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _kanbanConfigEnvironment) {\n  exports['default'] = {\n    name: 'App Version',\n    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_kanbanConfigEnvironment['default'].APP.name, _kanbanConfigEnvironment['default'].APP.version)\n  };\n});","define('kanban/initializers/export-application-global', ['exports', 'ember', 'kanban/config/environment'], function (exports, _ember, _kanbanConfigEnvironment) {\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (_kanbanConfigEnvironment['default'].exportApplicationGlobal !== false) {\n      var theGlobal;\n      if (typeof window !== 'undefined') {\n        theGlobal = window;\n      } else if (typeof global !== 'undefined') {\n        theGlobal = global;\n      } else if (typeof self !== 'undefined') {\n        theGlobal = self;\n      } else {\n        // no reasonable global, just bail\n        return;\n      }\n\n      var value = _kanbanConfigEnvironment['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = _ember['default'].String.classify(_kanbanConfigEnvironment['default'].modulePrefix);\n      }\n\n      if (!theGlobal[globalName]) {\n        theGlobal[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete theGlobal[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n});","define('kanban/router', ['exports', 'ember', 'kanban/config/environment'], function (exports, _ember, _kanbanConfigEnvironment) {\n\n  var Router = _ember['default'].Router.extend({\n    location: _kanbanConfigEnvironment['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route('board', {\n      'path': '/'\n    });\n  });\n\n  exports['default'] = Router;\n});","define('kanban/routes/board', ['exports', 'ember'], function (exports, _ember) {\n\n  /**\n  * TODO traer las listas del API\n  */\n\n  exports['default'] = _ember['default'].Route.extend({\n\n    lists: [{\n      id: 1,\n      title: 'Problems',\n      tasks: [{ id: 202002, text: 'Text 1' }, { id: 202003, text: 'Text 2' }, { id: 202004, text: 'Text 3' }]\n    }, {\n      id: 2,\n      title: 'Reproduced',\n      tasks: [{ id: 203002, text: 'Text 4' }, { id: 203003, text: 'Text 5' }]\n    }, {\n      id: 3,\n      title: 'Identified',\n      tasks: [{ id: 204002, text: 'Text 6' }, { id: 204003, text: 'Text 7' }]\n    }],\n\n    taskCreationModalIsOpen: false,\n    actualList: null,\n    newTaskText: '',\n\n    model: function model() {\n      return {\n        lists: this.get('lists'),\n        taskCreationModalIsOpen: this.get('taskCreationModalIsOpen'),\n        newTaskText: this.get('newTaskText')\n      };\n    },\n\n    actions: {\n\n      /**\n      * @param {Int} listId\n      */\n      onOpenTaskCreationModal: function onOpenTaskCreationModal(listId) {\n        this.set('taskCreationModalIsOpen', true);\n        this.set('actualList', listId);\n        this.refresh();\n      },\n\n      onCloseTaskCreationModal: function onCloseTaskCreationModal() {\n        this.set('taskCreationModalIsOpen', false);\n        this.set('actualList', null);\n        this.refresh();\n      },\n\n      onAddTask: function onAddTask() {\n        var _this = this;\n\n        var newTaskText = document.getElementById('newTaskText').value;\n        var newTask = {\n          id: Math.random(),\n          text: newTaskText\n        };\n        var newLists = this.get('lists').map(function (list) {\n          if (list.id === _this.get('actualList')) {\n            list.tasks.addObject(newTask);\n          }\n          return list;\n        });\n        this.set('lists', newLists);\n        this.send('onCloseTaskCreationModal');\n        this.refresh();\n      },\n      onDeleteTask: function onDeleteTask(listId, taskId) {\n        var newLists = this.get('lists').map(function (list) {\n          if (list.id === listId) {\n            var objectToRemove = list.tasks.findBy('id', taskId);\n            list.tasks.removeObject(objectToRemove);\n          }\n          return list;\n        });\n        this.set('lists', newLists);\n        this.refresh();\n      },\n      onNewList: function onNewList() {\n        var newList = {\n          id: Math.random(),\n          title: 'Nueva Lista',\n          tasks: []\n        };\n        var newLists = this.get('lists').addObject(newList);\n        this.set('lists', newLists);\n        this.refresh();\n      }\n    }\n\n  });\n});","define(\"kanban/templates/application\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.12\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 2,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"kanban/templates/application.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n        dom.insertBoundary(fragment, 0);\n        return morphs;\n      },\n      statements: [[\"content\", \"outlet\", [\"loc\", [null, [1, 0], [1, 10]]]]],\n      locals: [],\n      templates: []\n    };\n  })());\n});","define(\"kanban/templates/board\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    var child0 = (function () {\n      return {\n        meta: {\n          \"revision\": \"Ember@1.13.12\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 2,\n              \"column\": 2\n            },\n            \"end\": {\n              \"line\": 8,\n              \"column\": 2\n            }\n          },\n          \"moduleName\": \"kanban/templates/board.hbs\"\n        },\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [[\"inline\", \"list-component\", [], [\"list\", [\"subexpr\", \"@mut\", [[\"get\", \"list\", [\"loc\", [null, [4, 11], [4, 15]]]]], [], []], \"onOpenTaskCreationModal\", \"onOpenTaskCreationModal\", \"onDeleteTask\", \"onDeleteTask\"], [\"loc\", [null, [3, 4], [7, 6]]]]],\n        locals: [\"list\"],\n        templates: []\n      };\n    })();\n    var child1 = (function () {\n      return {\n        meta: {\n          \"revision\": \"Ember@1.13.12\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 12,\n              \"column\": 0\n            },\n            \"end\": {\n              \"line\": 31,\n              \"column\": 0\n            }\n          },\n          \"moduleName\": \"kanban/templates/board.hbs\"\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1, \"class\", \"translucentDiv\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2, \"class\", \"taskCreationModal\");\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3, \"class\", \"header\");\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4, \"class\", \"text\");\n          var el5 = dom.createTextNode(\"\\n          Crear nueva tarea\\n        \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4, \"class\", \"close\");\n          var el5 = dom.createTextNode(\"\\n          X\\n        \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3, \"class\", \"content\");\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"textarea\");\n          dom.setAttribute(el4, \"id\", \"newTaskText\");\n          dom.setAttribute(el4, \"autofocus\", \"\");\n          dom.setAttribute(el4, \"placeholder\", \"Agrega el texto de tu tarea\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"button\");\n          var el4 = dom.createTextNode(\"\\n        Agregar tarea\\n      \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var element0 = dom.childAt(fragment, [1, 1]);\n          var element1 = dom.childAt(element0, [1, 3]);\n          var element2 = dom.childAt(element0, [5]);\n          var morphs = new Array(2);\n          morphs[0] = dom.createElementMorph(element1);\n          morphs[1] = dom.createElementMorph(element2);\n          return morphs;\n        },\n        statements: [[\"element\", \"action\", [\"onCloseTaskCreationModal\"], [], [\"loc\", [null, [19, 27], [19, 64]]]], [\"element\", \"action\", [\"onAddTask\"], [], [\"loc\", [null, [26, 14], [26, 36]]]]],\n        locals: [],\n        templates: []\n      };\n    })();\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.12\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 32,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"kanban/templates/board.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"lists-container\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2, \"class\", \"newListButton\");\n        var el3 = dom.createTextNode(\"Nueva Lista\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element3 = dom.childAt(fragment, [0]);\n        var element4 = dom.childAt(element3, [3]);\n        var morphs = new Array(3);\n        morphs[0] = dom.createMorphAt(element3, 1, 1);\n        morphs[1] = dom.createElementMorph(element4);\n        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);\n        dom.insertBoundary(fragment, null);\n        return morphs;\n      },\n      statements: [[\"block\", \"each\", [[\"get\", \"model.lists\", [\"loc\", [null, [2, 10], [2, 21]]]]], [], 0, null, [\"loc\", [null, [2, 2], [8, 11]]]], [\"element\", \"action\", [\"onNewList\"], [], [\"loc\", [null, [9, 32], [9, 54]]]], [\"block\", \"if\", [[\"get\", \"model.taskCreationModalIsOpen\", [\"loc\", [null, [12, 6], [12, 35]]]]], [], 1, null, [\"loc\", [null, [12, 0], [31, 7]]]]],\n      locals: [],\n      templates: [child0, child1]\n    };\n  })());\n});","define(\"kanban/templates/components/list-component\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    var child0 = (function () {\n      return {\n        meta: {\n          \"revision\": \"Ember@1.13.12\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 11,\n              \"column\": 4\n            },\n            \"end\": {\n              \"line\": 16,\n              \"column\": 4\n            }\n          },\n          \"moduleName\": \"kanban/templates/components/list-component.hbs\"\n        },\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [[\"inline\", \"task-component\", [], [\"task\", [\"subexpr\", \"@mut\", [[\"get\", \"task\", [\"loc\", [null, [13, 13], [13, 17]]]]], [], []], \"onDeleteTask\", \"onDeleteTask\"], [\"loc\", [null, [12, 6], [15, 8]]]]],\n        locals: [\"task\"],\n        templates: []\n      };\n    })();\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.12\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 19,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"kanban/templates/components/list-component.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"list\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2, \"class\", \"header\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3, \"class\", \"title-text\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createComment(\"\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3, \"class\", \"add-task-button\");\n        var el4 = dom.createTextNode(\"\\n      +\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2, \"class\", \"task-container\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element1, [3]);\n        var morphs = new Array(4);\n        morphs[0] = dom.createAttrMorph(element1, 'id');\n        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);\n        morphs[2] = dom.createElementMorph(element2);\n        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);\n        return morphs;\n      },\n      statements: [[\"attribute\", \"id\", [\"get\", \"list.id\", [\"loc\", [null, [2, 27], [2, 34]]]]], [\"content\", \"list.title\", [\"loc\", [null, [4, 6], [4, 20]]]], [\"element\", \"action\", [\"onOpenTaskCreationModal\"], [], [\"loc\", [null, [6, 33], [6, 69]]]], [\"block\", \"each\", [[\"get\", \"list.tasks\", [\"loc\", [null, [11, 12], [11, 22]]]]], [], 0, null, [\"loc\", [null, [11, 4], [16, 13]]]]],\n      locals: [],\n      templates: [child0]\n    };\n  })());\n});","define(\"kanban/templates/components/task-component\", [\"exports\"], function (exports) {\n  exports[\"default\"] = Ember.HTMLBars.template((function () {\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.12\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 9,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"kanban/templates/components/task-component.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1, \"class\", \"task\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"strong\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2, \"class\", \"delete\");\n        var el3 = dom.createTextNode(\"\\n    X\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [3]);\n        var morphs = new Array(2);\n        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);\n        morphs[1] = dom.createElementMorph(element1);\n        return morphs;\n      },\n      statements: [[\"content\", \"task.text\", [\"loc\", [null, [3, 4], [3, 17]]]], [\"element\", \"action\", [\"onDeleteTask\"], [], [\"loc\", [null, [5, 22], [5, 47]]]]],\n      locals: [],\n      templates: []\n    };\n  })());\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('kanban/config/environment', ['ember'], function(Ember) {\n  var prefix = 'kanban';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (!runningTests) {\n  require(\"kanban/app\")[\"default\"].create({\"name\":\"kanban\",\"version\":\"0.0.0+41f435bb\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvlfile":"kanban.js"}